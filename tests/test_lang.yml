cases:
  string-1:
    what: Resolve a variable in the environment
    env:
      foo: 3
    code:
      - .foo
    expect: 3

  string-2:
    what: Non-variable syntax is just a string
    code:
      - foo
    expect: foo

  string-3:
    what: Looking up a non-existent variable will raise
    env:
      bar: 31
    code:
      - .bar-bad
    rescue: [env-name-error, bar-bad]

  string-4:
    what: Empty strings are just strings
    code:
      - ""
    expect: ""

  string-5:
    what: Map lookup
    env:
      foo:
        bar:
          baz: 99
    code:
      - .foo.bar.baz
    expect: 99

  string-6:
    what: No such attribute
    env:
      foo:
        bar: 3
    code:
      - .foo.baz
    rescue: [no-such-attr, { bar: 3 }, baz]

  string-7:
    what: Not a map
    env:
      foo: 442
    code:
      - .foo.bar
    rescue: [no-such-attr, 442, bar]

  string-8:
    what: String interpolation
    env:
      foo: 99
    code:
      - "I have #{foo} sandwhiches"
    expect: I have 99 sandwhiches

  string-9:
    what: String interpolation 2
    env:
      foo:
        bar: 84
        baz: 31
    code:
      - "'bar' is #{foo.bar}, and 'baz' is #{foo.baz}"
    expect: "'bar' is 84, and 'baz' is 31"

  string-10:
    what: Escaped interpolation
    code:
      - "This is escaped `#{eggs}"
    expect: "This is escaped #{eggs}"

  string-11:
    what: Not-actually escaped interpolation
    env:
      foo:
        bar: 42
    code:
      - "Answer: ``#{foo.bar}"
    expect: "Answer: ``42"

  string-12:
    what: Some escaped, some not
    env:
      foo: 423
    code:
      - "Result of `#{foo} is #{foo}"
    expect: "Result of #{foo} is 423"

  string-13:
    what: Unterminated interpolator
    code:
      - "I am a #{string"
    rescue: ["unterminated-string-interp", "string"]

  string-14:
    what: null interpolates as "null"
    env:
      foo: null
    code:
      - "foo is #{foo}"
    expect: "foo is null"

  let-1:
    what: let defines variables
    code:
      - [let, foo, 45]
      - .foo
    expect: 45

  let-2:
    what: let evaluates arguments
    code:
      - [let, foo, [id, 44]]
      - .foo
    expect: 44

  let-3:
    what: First arg to 'let' must be a string
    code:
      - [let, 7, foo]
    rescue: ["invalid-varname", 7]

  let-4:
    what: "'let' returns its value"
    code:
      - [let, foo, [id, 831]]
    expect: 831

  let-5:
    what: "'let' evaluates vars in a new scope"
    code:
      - [let, foo, [let, bar, 44]]
      - .foo
      - .bar
    rescue: [env-name-error, bar]

  let-6:
    what: Shorthand variable assignment
    code:
      - foo=: 4
      - .foo
    expect: 4

  let-7:
    what: Shorthand assignment returns its value
    code:
      - foo=: 922
    expect: 922

  let-8:
    what: Redefining a name is unallowed
    code:
      - foo=: 12
      - foo=: 42
    rescue: [already-named, foo, 42]

  let-9:
    what: Redefining a name is unallowed
    code:
      - [let: foo, be: 12]
      - [let: foo, be: 45]
    rescue: [already-named, foo, 45]

  seq-1:
    what: Empty seqs are treated as empty seqs
    code:
      - []
    expect: []

  seq-2:
    what: Sequences are treated as call expressions
    code:
      - [id, 5]
    expect: 5

  seq-3:
    what: First seq element is resolved as a callable
    code:
      - [[id, .id], String]
    expect: String

  seq-4:
    what: Quoted seq literals are evaluated
    code:
      - [seq, [1, 2, 3]]
    expect: [1, 2, 3]

  seq-5:
    what: Subexpressions in seqs are evaluated
    env:
      foo: 7
    code:
      - [seq, [1, 2, .foo, [id, 8]]]
    expect: [1, 2, 7, 8]

  seq-6:
    what: Sequences receive their own scope
    code:
      - [seq, [1, 2, [let, foo, 3], 4]]
      - .foo
    rescue: [env-name-error, foo]

  seq-7:
    what: Argument evaluation gets its own scope
    code:
      - [id, [let, foo, 2]]
      - .foo
    rescue: [env-name-error, foo]

  kwlist-1:
    what: Keyword syntax is evaluated
    code:
      - [id: Meow]
    expect: Meow

  kwlist-2:
    what: All elements in a kwlist-call must be maps
    code:
      - [id: 6, null]
    rescue: [invalid-kw-apply, [id: 6, null]]

  kwlist-3:
    what: Empty maps in a kwlist-call are okay
    code:
      - [id: 3, {}]
    expect: 3

  kwlist-4:
    what: Keys with quotes quote their argument
    code:
      - [id': [foo, bar]]
    expect: [foo, bar]

  kwlist-5:
    what: Keys with a backtick seq-quote their argument
    env:
      foo: 8
      bar: 9
    code:
      - [id:seq: [.foo, .bar]]
    expect: [8, 9]

  kwlist-6:
    what: Keys with quotes do not evaluate their arguments
    env:
      foo: 1
    code:
      - [id': [.foo, .bar]]
    expect: [.foo, .bar]

  kwlist-7:
    what: Keys with a hyphen evaluate each element of their argument
    code:
      - [id:do: [foo, bar]]
    expect: bar

  kwlist-8:
    what: Array-quotes require seq expressions
    code:
      - [id:seq: 6]
    rescue: [invalid-seq, 6]

  kwlist-9:
    what: Seq-quotes require seq expressions
    code:
      - [id:do: 9]
    rescue: [invalid-do, 9]

  kwlist-10:
    what: Array-quotes must be direct seqs
    env:
      foo: [1, 2, 3]
    code:
      - [id:seq: .foo]
    rescue: [invalid-seq, .foo]

  kwlist-11:
    what: Do-quotes require direct seqs
    env:
      foo: [1, 2, 3]
    code:
      - [id:do: .foo]
    rescue: [invalid-do, .foo]

  map-1:
    what: Bare maps are escaped
    env:
      foo: 31
    code:
      - [map, { foo: .foo }]
    expect: { foo: 31 }

  map-2:
    what: Shorthand for quoted map
    env:
      foo: 56812
    code:
      - [id:map: { foo: .foo }]
    expect: { foo: 56812 }

  map-3:
    what: Invalid quoted map
    code:
      - [map, not-a-map]
    rescue: [invalid-map, not-a-map]

  map-4:
    what: Invalid shorthand map quote
    code:
      - [id:map: 292]
    rescue: [invalid-map, 292]

  do-1:
    what: Empty 'do' is null
    code: []
    expect: null

  do-2:
    what: Auto-seq a map with a leading hyphen
    code:
      - -id:do:
          - 1
          - 2
          - 3
    expect: 3

  do-3:
    what: A bare map might look like a call, but it is not
    code:
      - id: 9
    rescue: ["invalid-bare-map", id: 9]

  do-4:
    what: Invalid bare map quote
    code:
      - -id:map: 8
    rescue: [invalid-map, 8]

  do-5:
    what: Wrap 'do' using normalized pair
    code:
      - -id:do:
          - 4
          - 5
          - 6
    expect: 6

  raise-1:
    what: do will re-raise errors
    code:
      - [raise: "123"]
    rescue: "123"

  lang-1:
    what: Evaluate an integer
    code: [1]
    expect: 1

  lang-2:
    what: Evaluate an integer pt 2
    code: [4]
    expect: 4

  lang-3:
    what: Evaluate a boolean
    code: [true]
    expect: true

  lang-4:
    what: The final value of 'do' is returned
    code:
      - 5
      - 8
    expect: 8

  lang-5:
    what: Assigning a variable returns the value
    code:
      - foo=: 9
    expect: 9

  lang-6:
    what: Assigned variables can be resolved
    code:
      - foo=: 3
      - bar=: 9
      - .bar
    expect: 9

  lang-7:
    what: Apply-syntax assignments work
    code:
      - [let, foo, 1]
      - .foo
    expect: 1

  lang-8:
    what: Inner 'do' will create a new variable scope
    code:
      - -do: [foo=: 1] # Assignment to 'foo' is scoped
      - .foo
    rescue: [env-name-error, foo]

  lang-9:
    what: seq will create a new scope
    code:
      - -id:seq: [1, 2, foo=: 8]
      - .foo
    rescue: [env-name-error, foo]

  lang-10:
    what: map will create a new scope
    code:
      - -id:map:
          foo: [let, foo, 2]
          bar: 3
      - .foo
    rescue: [env-name-error, foo]

  bad-apply:
    what: First argument of application must be a callable
    code:
      - [5, 2]
    rescue: ["invalid-apply", 5, [2]]

  bad-key-suffix:
    what: The ";" char is not a valid key suffix
    code:
      - [foo;: 5]
    rescue: ["invalid-key-suffix", "foo;", 5]

  defun-macro:
    what: Define a defun macro
    code:
      # prettier-ignore
      - [let: defun, be: [
         macro: [fn-name, of, is],
              is:quasiquote:
                [let: [unquote: .fn-name], be: [
                 lambda: [unquote: .of], is: [unquote: .is]]]]]
      - [defun: foo, of: [a, b], is: [add, .a, .b]]
      - [foo, 2, 3]
    expect: 5
