---
cases:
  apply-1:
    what: Check that 'apply' works
    code:
      - func=: .add
      - args=:seq: [1, [add: 4, and: 9]]
      - -assert:
          - eq: [apply: .func, with: .args]
          - and: 14
    expect: null

  apply-2:
    what: Check 'apply' with a non-callable object
    code:
      - func=: 88
      - args=': [1, 2]
      - [apply: .func, with: .args]
    rescue: [invalid-apply-func, 88, [1, 2]]

  env-1:
    what: __env__ is okay
    code:
      - [__env__]
      - 4
    expect: 4

  env-2:
    what: __env__ takes no arguments
    code:
      - [__env__, 6]
    rescue: [invalid-args, __env__, [6]]

  env-3:
    what: Bad env lookup via "ref"
    code:
      - [ref: "nonesuch"]
    rescue: [env-name-error, nonesuch]

  eval-1:
    what: Evaluate a simple expression
    code:
      - res=: [eval': [add: 1, and: 4], with: [__env__]]
      - .res
    expect: 5

  eval-2:
    what: Evaluate raises if given non-env
    code:
      - [eval': 2, with: 44]
    rescue: [invalid-eval-env, 44]

  math-1:
    what: Simple addition
    code:
      - [+, 2, 3]
    expect: 5

  math-2:
    what: Nested arithmetic, and float division
    code:
      - [/, [+, 2, 3], 2]
    expect: 2.5

  math-3:
    what: floordiv gives an integral result
    code:
      - [//, [+, 2, 3], 2]
    expect: 2

  math-4:
    what: KeywordList math
    code:
      - [add: 4, and: 3]
    expect: 7

  cond-1:
    what: Test 'cond' for branches
    code:
      - -cond:
          - - [eq: 4, and: 6]
            - 88
          - - [eq: 8, and: 0]
            - 10
          - - true
            - "Salad"
    expect: "Salad"

  cond-2:
    what: Test 'cond' for evaluated conditions
    code:
      - foo=: 5
      - -cond:
          - - [eq: .foo, and: 1]
            - One
          - - [eq: .foo, and: 5]
            - Five
          - - [eq: .foo, and: 9]
            - Nine
    expect: Five

  cond-3:
    what: No matching conditions is an error
    code:
      - foo=: 9
      - -cond:
          - - [eq: .foo, and: 3]
            - Three
          - - [eq: .foo, and: 88]
            - Eighty-eight
    rescue: [cond-no-match]

  cond-4:
    what: cond creates a new scope
    code:
      - -cond:
          - - [eq: [let, foo, 5], and: 8]
            - Nope
          - - [eq: .foo, and: 3]
            - Three
      - .foo
    rescue: [env-name-error, foo]

  cond-5:
    what: cond creates a new scope 2
    code:
      - -cond:
          - - true
            - [let, foo, 7]
      - .foo
    rescue: [env-name-error, foo]

  cond-6:
    what: cond with a non-boolean branch value
    code:
      - foo=: 81
      - -cond:
          - - .foo
            - 8
    rescue: [invalid-cond-condition, 81]

  cond-7:
    what: cond with invalid branch expressions is invalid
    code:
      - -cond:
          - [true, 5]
          - not-a-pair
    rescue: [invalid-cond-branch, not-a-pair]

  cond-8:
    what: cond invalid branches 2
    code:
      - -cond:
          - [true, 5]
          - [too, many, elements]
    rescue: [invalid-cond-branch, [too, many, elements]]

  cond-9:
    what: Cond with too many args
    code:
      - [cond, 3, 4, 5]
    rescue: [invalid-args, [3, 4, 5], '"cond" expects exactly one argument']

  cond-10:
    what: Cond with too few arguments
    code:
      - [cond]
    rescue: [invalid-args, [], '"cond" expects exactly one argument']

  cond-11:
    what: Cond expects an array argument
    code:
      - [cond, nope]
    rescue: [invalid-args, [nope], '"cond" expects a literal sequence argument']

  compare-1:
    what: Compare two numbers
    code:
      - [compare, 3, 4]
    expect: lt

  compare-2:
    what: Compare two strings
    code:
      - [compare, foo, bar]
    expect: gt

  compare-3:
    what: Compare two sequences
    code:
      - [compare:seq: [1, 2, 3], with:seq: [1, 3, 2]]
    expect: lt

  compare-4:
    what: Compare using macros
    code:
      - [lt, 4, 1]
    expect: false

  compare-5:
    what: Compare gt
    code:
      - [gt, 7, 3]
    expect: true

  compare-6:
    what: Compare gte
    code:
      - [gte, 9, 9]
    expect: true

  compare-7:
    what: Compare lte
    code:
      - [lte, 8, 22]
    expect: true

  compare-8:
    what: Invalid comparison
    code:
      - [compare: 4, with: str]
    rescue: [invalid-compare, 4, str]

  compare-9:
    what: Compare objects
    code:
      - [compare': { a: b }, with': { a: c }]
    expect: lt

  same-1:
    what: Sameness 1
    code:
      - [let, foo, [seq, [1, 2, 3]]]
      - [let, bar, .foo]
      - [same, .foo, .bar]
    expect: true

  same-2:
    what: Sameness 2
    code:
      - [let, foo, [seq, [1, 2, 3]]]
      - [let, bar, [seq, [1, 2, 3]]]
      - [same, .foo, .bar]
    expect: false

  if-1:
    what: Simple if branch
    code:
      - foo=: 6
      - - if: [eq, .foo, 5]
        - then: It is five
        - else: It is not five
    expect: It is not five

  if-2:
    what: if branch with a non-bool condition
    code:
      - foo=: 991
      - - if: .foo
        - then: Nope
        - else: Won't happen
    rescue: ["invalid-if-condition", 991]

  if-3:
    what: if branch creates a new scope
    code:
      - - if: [eq: .foo, and: 92]
        - then: [let, foo, 91]
        - else: null
    rescue: [env-name-error, foo]

  if-4:
    what: if branch cond scope is not shared
    code:
      - - if:do: [[let, foo, 7], [eq, .foo, 7]]
        - then: [assert, [eq, .foo, 92]]
        - else: [raise, Nope]
    rescue: [env-name-error, foo]

  do-1:
    what: do returns a value
    code:
      - [do, [5]]
    expect: 5

  do-2:
    what: do retains the scope
    code:
      - foo=: 8
      - .foo
    expect: 8

  do-3:
    what: do requires an sequence
    code:
      - [do, 8]
    rescue: ["invalid-do", 8]

  do-4:
    what: quoted-do still requires a sequence
    code:
      - -do: 4
    rescue: ["invalid-do", 4]

  let-1:
    what: Define and use variables
    code:
      - [let: b, be: 5]
      - [let: c, be: 8]
      - [add: .b, and: .c]
    expect: 13

  let-2:
    what: Define and use variables 2
    # prettier-ignore
    code:
      - [{
        "do": [
          [{"let": "c"}, {"be": 33}],
          [{"let": "d"}, {"be": 77}],
          ["+", ".c", ".d"]
        ]
      }]
    expect: 110

  let-3:
    what: Define and use variables 3
    code:
      - [do, [[let, egg, 13], [add, .egg, 12]]]
    expect: 25

  let-4:
    what: Define a variable with a shorthand
    code:
      - a=: 66
      - .a
    expect: 66

  let-5:
    what: Define and use variables 4
    code:
      - [let, foo, 5]
      - .foo
    expect: 5

  quote-1:
    what: Quoting a literal
    code:
      - [quote: 3]
    expect: 3

  quote-2:
    what: Quoting map values works
    code:
      - -map:
          foo: [quote: 3]
          bar: [quote: 6]
    expect: { foo: 3, bar: 6 }

  quote-3:
    what: Quoting complex values does no evaluation
    code:
      - [quote: { foo: [quote: 3], bar: [add: 3, and: 65] }]
    expect:
      foo: [quote: 3]
      bar: [add: 3, and: 65]

  quote-4:
    what: Quote shorthand
    code:
      - -map:
          foo': [bar: baz]
    expect:
      foo: [bar: baz]

  quote-5:
    what: Quote with 'let'
    code:
      - [let: a, be': { foo: bar }]
      - .a
    expect:
      foo: bar

  quote-6:
    what: Quote shorthand with a quote shorthand within it
    code:
      - [let: a, be': { foo': baz }]
      - .a
    expect:
      foo': baz

  quote-7:
    what: map-quote
    code:
      - [let: a, be:map: { foo': baz }]
      - .a
    expect:
      foo: baz

  quote-8:
    what: quoting an argument that is a function name
    code:
      - [add': 3, and: 7]
    expect: 10

  quote-9:
    what: Setting variables by quoting .strings
    code:
      - [let': .value, be: 3]
      - [ref': .value]
    expect: 3

  quote-10:
    what: seq-quote shorthand
    code:
      - [let: foo, be: 33]
      - [let: bar, be:seq: [bar, .foo]]
      - .bar
    expect: [bar, 33]

  quote-11:
    what: Map quotes receive their own scope
    code:
      - -id:map:
          foo: [let, foo, 4]
      - .foo
    rescue: [env-name-error, foo]

  lambda-1:
    what: A simple function, positional cal
    code:
      - [let: fun, be: [lambda: [a, b], is: [add: .a, and: .b]]]
      - [fun, 6, 7]
    expect: 13

  lambda-2:
    what: A simple function 2
    code:
      - plus=: 6
      - fun=: [lambda: [a, b], is: [add, .a, [add, .plus, .b]]]
      - [fun, 6, 7]
    expect: 19

  lambda-3:
    what: A simple function using kwlist-call
    code:
      - my-mult=: [lambda: [val, with], is: [mul: .val, by: .with]]
      - [my-mult: 7, with: 3]
    expect: 21

  lambda-4:
    what: Multi-statement body of a function
    expect: 72
    code:
      - fun=:
          - lambda: [val]
          - is:do:
              - square=: [mul, .val, .val]
              - [add, .square, .val]
      - [fun, 8]

  lambda-5:
    what: Function body does not affect caller scope
    code:
      - func=:
          - lambda: [foo]
          - is:do:
              - some-var=: 9
              - [add: .some-var, and: .foo]
      - result=: [func, 1]
      - [or: [eq: .result, and: 10], or: [raise:seq: ["failed", .result]]]
      - .some-var
    rescue: [env-name-error, some-var]

  lambda-6:
    what: Simple local variable
    code:
      - func=:
          - lambda: [a]
          - is:do:
              - o=: 9
              - [sub: .o, minus: .a]
      - [apply: .func, with:seq: [1]]
    expect: 8

  or-1:
    what: Short-circuit 'or'
    code:
      - [or: false, or: [eq: 5, and: 8], or: [neq, 6, 1], or: [raise: Ouch]]
    expect: true

  or-2:
    what: Short-circuit will fall through
    code:
      - [or: false, or: [eq: 5, and: 8], or: [raise: Ouch]]
    rescue: Ouch

  or-3:
    what: Non-bool condition is an error
    code:
      - foo=: 4
      - [or: false, or: .foo, or: [raise: Nope]]
    rescue: [invalid-or-condition, 4]

  and-1:
    what: Conditional conjuction
    code:
      - [and: true, and: [eq: 4, and: 4]]
    expect: true

  and-2:
    what: Conjunction 2
    code:
      - [and: true, and: [eq, 3, 1]]
    expect: false

  and-3:
    what: and will short-circuit
    code:
      - [and: false, and: [raise: 42]]
    expect: false

  and-4:
    what: and requires a boolean operand
    code:
      - [and: true, and: 44]
    rescue: [invalid-and-condition, 44]

  macro-1:
    what: A simply macro that is a value
    code:
      - m=: [macro: [], is: Something]
      - [m]
    expect: Something

  macro-2:
    what: Macro that returns an expression
    code:
      - [let: m, be: [macro: [a], is: [[ref: .a], 99, 74]]]
      - [m, add]
    expect: 173

  macro-3:
    what: Macro is evaluated after expansion
    code:
      - m=: [macro: [], is': .value]
      - value=: 92
      - [m]
    expect: 92

  raise-1:
    what: Simple error
    code:
      - [raise: 4]
    rescue: 4

  join-1:
    what: Array joining
    code:
      - a=:seq: [1, 2, 3, 4]
      - b=:seq: [3, 1, 7, 1]
      - c=: [join: .a, with: .b]
      - .c
    expect: [1, 2, 3, 4, 3, 1, 7, 1]

  join-2:
    what: String joining
    code:
      - [join: I am a string, with:seq: [I, am, an, array]]
    rescue: [invalid-join, I am a string, [I, am, an, array]]

  assert-1:
    what: Assertion fails
    code:
      - [assert: true]
      - [assert: [eq: 1, and: 1]]
      - [assert: [neq: 4, and: "string"]]
      - [assert: [eq: 4, and: 1]]
    rescue: ["assertion-failed", [eq: 4, and: 1], [eq: 4, and: 1]]

  assert-2:
    what: Assertion expands kwlist values
    code:
      - [assert: true]
      - foo=: 881
      - [assert: [eq: 1, and: .foo]]
    rescue: [assertion-failed, [eq: 1, and: .foo], [eq: 1, and: 881]]

  assert-3:
    what: Assertion expands array values
    code:
      - [assert: true]
      - foo=: 881
      - [assert: [eq, 1, .foo]]
    rescue: [assertion-failed, [eq, 1, .foo], [eq, 1, 881]]

  eq-1:
    what: Simple equivalence
    code:
      - [assert: [eq, 5, [add, 3, 2]]]
    expect: null

  div-1:
    what: Check division and floordivision
    code:
      - -assert:
          - eq: [div: 3, by: 2]
          - and: 1.5
      - -assert:
          - eq: [floordiv: 3, by: 2]
          - and: 1
    expect: null

  len-1:
    what: Length of a string
    code:
      - [len: "Hello"]
    expect: 5

  len-2:
    what: Check length of string, seq, and map
    code:
      - [assert: [eq: 5, and: [len: "Hello"]]]
      - [assert: [eq: 2, and: [len': [1, 2]]]]
      - [assert: [eq: 3, and: [len:map: { a: b, c: d, e: f }]]]
      - [len': [1, 2, 3]]
    expect: 3

  len-3:
    what: Length of a quoted map
    code:
      - [len': { a: b, c: d, e: f }]
    expect: 3

  len-4:
    what: Length of a bool is an error
    code:
      - [len: true]
    rescue: [invalid-len, true]

  elem-1:
    what: Get a seq element
    code:
      - arr=': [foo, bar, baz]
      - [assert: [eq: bar, and: [elem: .arr, at: 1]]]
      - [assert: [eq: baz, and: [elem: .arr, at: 2]]]
      - [assert: [eq: baz, and: [elem: .arr, at: -1]]]
      - [assert: [eq: foo, and: [elem: .arr, at: 0]]]
    expect: null

  elem-2:
    what: Out-of-bounds is an error
    code:
      - arr=': [foo, bar, baz]
      - [elem: .arr, at: 3]
    rescue: ["invalid-elem-index", [foo, bar, baz], 3]

  slice-1:
    what: Get a sliec of a sequences
    code:
      - arr=': [1, 2, 3, 4, 5, 6]
      - -assert:
          - eq': [1, 2, 3]
          - and: [slice: .arr, to: 3]
      - -assert:
          - eq': [3, 4, 5, 6]
          - and: [slice: .arr, from: 2]
      - -assert:
          - eq': [1, 2, 3]
          - and: [slice: .arr, to: -3]
      - -assert:
          - eq': [3, 4, 5, 6]
          - and: [slice: .arr, from: -4]
      - -assert:
          - eq': []
          - and: [slice: .arr, from: -1, to: 5]
    expect: null

  slice-2:
    what: Get an invalid slice is an error
    code:
      - arr=': [1, 2, 3]
      - [slice: .arr, from: 2, to: 1]

    rescue: [invalid-slice-range, [1, 2, 3], 2, 1]
